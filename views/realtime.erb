<%= include_gon %>
<head>
    <link type="text/css" rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css">
    <link type="text/css" rel="stylesheet" href="/css/graph.css">
    <link type="text/css" rel="stylesheet" href="/css/detail.css">
    <link type="text/css" rel="stylesheet" href="/css/legend.css">
    <link type="text/css" rel="stylesheet" href="/css/extensions.css?v=2">

    <script src="/js/d3.v3.js"></script>
    <script src="/js/extensions.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
    <script>
        jQuery.noConflict();
    </script>

    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.min.js"></script>

    <script src="/js/js-src/Rickshaw.js"></script>
    <script src="/js/js-src/Rickshaw.Class.js"></script>
    <script src="/js/js-src/Rickshaw.Compat.ClassList.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.Area.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.Line.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.Bar.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.ScatterPlot.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Renderer.Stack.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.RangeSlider.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.RangeSlider.Preview.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.HoverDetail.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Annotate.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Legend.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Axis.Time.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Behavior.Series.Toggle.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Behavior.Series.Order.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Behavior.Series.Highlight.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Smoother.js"></script>
    <script src="/js/js-src/Rickshaw.Fixtures.Time.js"></script>
    <script src="/js/js-src/Rickshaw.Fixtures.Time.Local.js"></script>
    <script src="/js/js-src/Rickshaw.Fixtures.Number.js"></script>
    <script src="/js/js-src/Rickshaw.Fixtures.RandomData.js"></script>
    <script src="/js/js-src/Rickshaw.Fixtures.Color.js"></script>
    <script src="/js/js-src/Rickshaw.Color.Palette.js"></script>
    <script src="/js/js-src/Rickshaw.Graph.Axis.Y.js"></script>

    
</head>
<body>

<div id="content">

    <form id="side_panel">
        <h1>CitiBike Station Data</h1>
        <section><div id="legend"></div></section>
        <section>
            <div id="renderer_form" class="toggler">
                <input type="radio" name="renderer" id="area" value="area" checked>
                <label for="area">area</label>
                <input type="radio" name="renderer" id="bar" value="bar">
                <label for="bar">bar</label>
                <input type="radio" name="renderer" id="line" value="line">
                <label for="line">line</label>
                <input type="radio" name="renderer" id="scatter" value="scatterplot">
                <label for="scatter">scatter</label>
            </div>
        </section>
        <section>
            <div id="offset_form">
                <label for="stack">
                    <input type="radio" name="offset" id="stack" value="zero" checked>
                    <span>stack</span>
                </label>
                <label for="stream">
                    <input type="radio" name="offset" id="stream" value="wiggle">
                    <span>stream</span>
                </label>
                <label for="pct">
                    <input type="radio" name="offset" id="pct" value="expand">
                    <span>pct</span>
                </label>
                <label for="value">
                    <input type="radio" name="offset" id="value" value="value">
                    <span>value</span>
                </label>
            </div>
            <div id="interpolation_form">
                <label for="cardinal">
                    <input type="radio" name="interpolation" id="cardinal" value="cardinal" checked>
                    <span>cardinal</span>
                </label>
                <label for="linear">
                    <input type="radio" name="interpolation" id="linear" value="linear">
                    <span>linear</span>
                </label>
                <label for="step">
                    <input type="radio" name="interpolation" id="step" value="step-after">
                    <span>step</span>
                </label>
            </div>
        </section>
        <section>
            <h6>Smoothing</h6>
            <div id="smoother"></div>
        </section>
        <section></section>
    </form>

    <div id="chart_container">
        <div id="chart"></div>
        <div id="timeline"></div>
        <div id="preview"></div>
    </div>

</div>



<script>
 // var url = "http://www.citibikenyc.com/stations/json?callback=?"
// jQuery.getJSON(url, function(data) { console.log(data)});



// var myurl = "http://www.citibikenyc.com/stations/json"

function exampleFunction(exampleData)  {
    console.log(exampleData);
}

var citibikeurl = "http://api.citybik.es/citi-bike-nyc.json"
// var jsonfeed


// var bikeData = gon.bikedata;
// console.log(bikeData)


// set up our data series with 150 random data points

// var seriesData = [[{x: 1, y: 3}, {x: 2, y: 3}, {x: 3, y: 4}]];
// var seriesData = [gon.fakebikedata];
var bikeData = gon.bikedata;
console.log(bikeData)
var seriesData = [[],[],[]]
var timeInterval = 60
// var random = new Rickshaw.Fixtures.RandomData(timeInterval);


var timeBase = Math.floor((new Date().getTime() / 1000)) - (24*60*60);

function newAddData(data, citibikes) {

    var index = data[0].length;

    // var counter = 1;

    data.forEach( function(series) {

     series.push( { x: (index * timeInterval) + timeBase, y: citibikes } );
    } );

};

for (var i = 0; i < bikeData[0].length; i++) {
    newAddData([seriesData[0]], bikeData[0][i]);
    newAddData([seriesData[1]], bikeData[1][i]);
    newAddData([seriesData[2]], bikeData[2][i]);
}


// for (var i = 0; i < 150; i++) {
//     newAddData(seriesData, (Math.floor(Math.random() * 3000) + 1));
// }

var palette = new Rickshaw.Color.Palette( { scheme: 'spectrum14' } );

// instantiate our graph!

var graph = new Rickshaw.Graph( {
    element: document.getElementById("chart"),
    width: 900,
    height: 500,
    renderer: 'area',
    stroke: true,
    preserve: true,
    series: [
        {
            color: palette.color(),
            data: seriesData[0],
            name: 'Midtown'
        },

        {
         color: palette.color(),
         data: seriesData[1],
         name: 'Downtown'
        }
        , {
         color: palette.color(),
         data: seriesData[2],
         name: 'Brooklyn'
        }
    ]
} );

graph.render();

var preview = new Rickshaw.Graph.RangeSlider( {
    graph: graph,
    element: document.getElementById('preview'),
} );

var hoverDetail = new Rickshaw.Graph.HoverDetail( {
    graph: graph,
    xFormatter: function(x) {
        return new Date(x * 1000).toString();
    }
} );

var annotator = new Rickshaw.Graph.Annotate( {
    graph: graph,
    element: document.getElementById('timeline')
} );

var legend = new Rickshaw.Graph.Legend( {
    graph: graph,
    element: document.getElementById('legend')

} );

var shelving = new Rickshaw.Graph.Behavior.Series.Toggle( {
    graph: graph,
    legend: legend
} );

var order = new Rickshaw.Graph.Behavior.Series.Order( {
    graph: graph,
    legend: legend
} );

var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
    graph: graph,
    legend: legend
} );

var smoother = new Rickshaw.Graph.Smoother( {
    graph: graph,
    element: document.querySelector('#smoother')
} );

var ticksTreatment = 'glow';

var xAxis = new Rickshaw.Graph.Axis.Time( {
    graph: graph,
    ticksTreatment: ticksTreatment,
    timeFixture: new Rickshaw.Fixtures.Time.Local()
} );

xAxis.render();

var yAxis = new Rickshaw.Graph.Axis.Y( {
    graph: graph,
    tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
    ticksTreatment: ticksTreatment
} );

yAxis.render();


var controls = new RenderControls( {
    element: document.querySelector('form'),
    graph: graph
} );

// add some data every so often


function newRemoveData(data) {
    data.forEach( function(series) {
        series.shift();
    } );
    timeBase += timeInterval;
};


//farthest east station in manhattan lng -73975748
//farthest west in north brooklyn lng -73971000, lat 40705311
// farthest west station in brooklyn lng -73999978
function sortNeighborhoods(json){
    var midtownBikes = 0;
    var brooklynBikes = 0;
    var downtownBikes = 0;
       for(var i = 0; i < json.length; i++){
            if(json[i]["lng"] >= -73971000 || (json[i]["lat"] <= 40705311 && json[i]["lng"] >= -73999978)){
            brooklynBikes += json[i]["bikes"]
            }else if(json[i]["lat"] > 40740895){
            midtownBikes += json[i]["bikes"]
            }else if(json[i]["lat"] <= 40740895){
            downtownBikes += json[i]["bikes"]
            };
       };
    newAddData([seriesData[0]], midtownBikes);
    newAddData([seriesData[1]], downtownBikes);
    newAddData([seriesData[2]], brooklynBikes);
}



setInterval( function() {
    newRemoveData(seriesData);
    jQuery.ajax({
        url: citibikeurl,
        type: 'GET',
        dataType: "jsonp",
        crossDomain: true,
        success: function(json){
            sortNeighborhoods(json);
        },
        error: function(){
           newAddData([seriesData[0]], seriesData[0][seriesData[0].length - 1]["y"]);
           newAddData([seriesData[1]], seriesData[1][seriesData[1].length - 1]["y"]);
           newAddData([seriesData[2]], seriesData[2][seriesData[2].length - 1]["y"]);
        }
    });
    // random.addData(seriesData);
    graph.update();

}, 2000 );

// function addAnnotation(force) {
//     if (messages.length > 0 && (force || Math.random() >= 0.95)) {
//         annotator.add(seriesData[2][seriesData[2].length-1].x, messages.shift());
//         annotator.update();
//     }
// }

// addAnnotation(true);
// setTimeout( function() { setInterval( addAnnotation, 6000 ) }, 6000 );

var previewXAxis = new Rickshaw.Graph.Axis.Time({
    graph: preview.previews[0],
    timeFixture: new Rickshaw.Fixtures.Time.Local(),
    ticksTreatment: ticksTreatment
});

previewXAxis.render();

</script>

</body>
